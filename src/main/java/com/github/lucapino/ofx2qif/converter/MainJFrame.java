/*
 *    Copyright (c) 2013 Luca Tagliani
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package com.github.lucapino.ofx2qif.converter;

import java.io.File;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileSystemView;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang.StringUtils;

/**
 * An OFX2QIF Convert
 *
 * @author tagliani
 */
public class MainJFrame extends javax.swing.JFrame {

    ResourceBundle bundle;

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        bundle = ResourceBundle.getBundle("Bundle");
        this.setIconImage(new ImageIcon(this.getClass().getResource("/images/Money-icon.png")).getImage());
        MessageConsole console = new MessageConsole(logTextArea, true);
        console.redirectOut();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputFileLabel = new javax.swing.JLabel();
        outputFileLabel = new javax.swing.JLabel();
        convertButton = new javax.swing.JButton();
        inputFileTextField = new javax.swing.JTextField();
        outputFileTextField = new javax.swing.JTextField();
        chooseInputFileButton = new javax.swing.JButton();
        chooseOutputFileButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        setTitle(bundle.getString("MainJFrame.title")); // NOI18N
        setResizable(false);

        inputFileLabel.setText(bundle.getString("MainJFrame.inputFileLabel.text")); // NOI18N

        outputFileLabel.setText(bundle.getString("MainJFrame.outputFileLabel.text")); // NOI18N

        convertButton.setText(bundle.getString("MainJFrame.convertButton.text")); // NOI18N
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        chooseInputFileButton.setText(bundle.getString("MainJFrame.chooseInputFileButton.text")); // NOI18N
        chooseInputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseInputFileButtonActionPerformed(evt);
            }
        });

        chooseOutputFileButton.setText(bundle.getString("MainJFrame.chooseOutputFileButton.text")); // NOI18N
        chooseOutputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseOutputFileButtonActionPerformed(evt);
            }
        });

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputFileLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseInputFileButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(outputFileLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseOutputFileButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(convertButton)
                .addGap(176, 176, 176))
            .addComponent(jScrollPane1)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {convertButton, inputFileLabel, outputFileLabel});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {inputFileTextField, outputFileTextField});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFileLabel)
                    .addComponent(inputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseInputFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFileLabel)
                    .addComponent(outputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseOutputFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(convertButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseInputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseInputFileButtonActionPerformed
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView());
        jfc.setMultiSelectionEnabled(false);
        jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jfc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return (f.isDirectory() || (f.isFile() && FilenameUtils.isExtension(f.getName().toLowerCase(), "ofx")));
            }

            @Override
            public String getDescription() {
                return "OFX Files (*.ofx)";
            }
        });
        int result = jfc.showOpenDialog(this);
        switch (result) {
            case JFileChooser.APPROVE_OPTION:
                inputFileTextField.setText(jfc.getSelectedFile().getAbsolutePath());
                inputFileTextField.setCaretPosition(0);
        }
    }//GEN-LAST:event_chooseInputFileButtonActionPerformed

    private void chooseOutputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseOutputFileButtonActionPerformed
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView());
        jfc.setMultiSelectionEnabled(false);
        jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jfc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return (f.isDirectory() || (f.isFile() && FilenameUtils.isExtension(f.getName().toLowerCase(), "qif")));
            }

            @Override
            public String getDescription() {
                return "QIF Files (*.qif)";
            }
        });
        int result = jfc.showSaveDialog(this);
        switch (result) {
            case JFileChooser.APPROVE_OPTION:
                outputFileTextField.setText(jfc.getSelectedFile().getAbsolutePath());
                outputFileTextField.setCaretPosition(0);
        }
    }//GEN-LAST:event_chooseOutputFileButtonActionPerformed

    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed
        if (StringUtils.isNotBlank(inputFileTextField.getText()) && StringUtils.isNotBlank(outputFileTextField.getText())) {
            System.out.println("Converting");
            Converter converter = new Converter();
            try {
                converter.convert(inputFileTextField.getText(), outputFileTextField.getText());
                JOptionPane.showMessageDialog(this, bundle.getString("CONVERSION DONE"), bundle.getString("CONVERSION"), JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, bundle.getString("ERROR CONVERTING FILE"), bundle.getString("ERROR"), JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_convertButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseInputFileButton;
    private javax.swing.JButton chooseOutputFileButton;
    private javax.swing.JButton convertButton;
    private javax.swing.JLabel inputFileLabel;
    private javax.swing.JTextField inputFileTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JLabel outputFileLabel;
    private javax.swing.JTextField outputFileTextField;
    // End of variables declaration//GEN-END:variables
}
